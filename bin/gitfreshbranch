#!/bin/zsh
# gitfreshbranch
# https://about.gitlab.com/blog/2018/06/07/keeping-git-commit-history-clean/#situation-4-my-git-commit-history-doesnt-make-sense-i-need-a-fresh-start

HELP="\033[1;34mUse -h for help\033[0m"
ERROR="\033[1;31mError!\033[0m"
WARNING="\033[0;33mWarning!\033[0m"

while test $# -gt 0; do
  case "$1" in
    -h|--help)
        shift 2> /dev/null
        echo "Git fresh branch - attempt to capture arguments"
        echo " "
        echo "gitfreshbranch [options] application [arguments]"
        echo " "
        echo "options:"
        echo "-sb, --source-branch          [required] Define the branch to apply fresh start"
        echo "-rb, --reference-branch       [required] Define the base branch from which the source branch will be recreated"
        echo "-cb, --clean-branch           [optional] Define new branch with a clean history."
        echo "                                         Default: same name of source branch"
        echo " "
        echo "More information here:"
        echo "https://about.gitlab.com/blog/2018/06/07/keeping-git-commit-history-clean/#situation-4-my-git-commit-history-doesnt-make-sense-i-need-a-fresh-start"
        exit 0
        ;;
    -sb|--source-branch)
        shift 2> /dev/null
        sb=$1
        shift 2> /dev/null
        ;;
   -rb|--reference-branch)
      shift 2> /dev/null
      rb=$1
      shift 2> /dev/null
      ;;
    -cb|--clean-branch)
      shift 2> /dev/null
      cb=$1
      shift 2> /dev/null
      ;;
    *)
      shift 2> /dev/null
      ;;
  esac
done

if ! git status &>/dev/null; then
  echo "$ERROR\nThere is no sign of git anywhere in the current directory\nPlease run this script from a git repository"
  echo ""
  echo "$HELP"
  exit 0
fi

[[ -z "$sb" ]] && echo "$WARNING Missing the branch to apply fresh start. \n$HELP" && exit 0
[[ -z "$rb" ]] && echo "$WARNING Missing the base branch from which the source branch will be recreated. \n$HELP" && exit 0
[[ -z "$cb" ]] && cb=$sb

# clean patch var of forbidden characters: /
patch=$(echo "$sb.patch" | sed -r 's/[//]+/_/g')

temp=$(mktemp -d)
patchfile="$temp/$patch"

git switch $sb 2> /dev/null || echo "$ERROR git switch $sb failed" && rm -r $temp && exit 0
git merge $rb 2> /dev/null || echo "$ERROR git merge $rb failed" && rm -r $temp && exit 0
git diff $rb $sb > $patchfile 2> /dev/null || echo "$ERROR git diff $rb $sb > $patchfile failed" && rm -r $temp && exit 0
git switch $rb 2> /dev/null || echo "$ERROR git switch $rb failed" && rm -r $temp && exit 0

[[ "$sb" == "$cb" ]]  && git branch -D $sb 2> /dev/null || echo "$ERROR git branch -D $sb failed" && rm -r $temp && exit 0

git switch -c $cb 2> /dev/null || echo "$ERROR git switch -c $cb failed" && rm -r $temp && exit 0
git apply $patchfile 2> /dev/null || echo "$ERROR git apply $patchfile failed"

rm -r $temp
exit 1